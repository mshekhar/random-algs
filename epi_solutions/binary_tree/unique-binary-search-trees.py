class Solution(object):
    def calculate_tree_count(self, start, end, dp):
        if end - start + 1 <= 0:
            return 0
        if end - start + 1 in dp:
            return dp[end - start + 1]
        res = 0
        i = start
        while i <= end:
            left = self.calculate_tree_count(start, i - 1, dp)
            right = self.calculate_tree_count(i + 1, end, dp)
            p = 1
            p *= left if left > 0 else 1
            p *= right if right > 0 else 1
            res += p
            i += 1
        dp[end - start + 1] = res
        return res

    def numTrees(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = {1: 1, 2: 2, 3: 5}
        dp = {1: 1, 2: 2, 3: 5, 4: 14, 5: 42, 6: 132, 7: 429, 8: 1430, 9: 4862, 10: 16796, 11: 58786, 12: 208012,
              13: 742900,
              14: 2674440, 15: 9694845, 16: 35357670, 17: 129644790, 18: 477638700, 19: 1767263190, 20: 6564120420,
              21: 24466267020, 22: 91482563640, 23: 343059613650, 24: 1289904147324, 25: 4861946401452,
              26: 18367353072152,
              27: 69533550916004, 28: 263747951750360, 29: 1002242216651368, 30: 3814986502092304, 31: 14544636039226909,
              32: 55534064877048198, 33: 212336130412243110, 34: 812944042149730764, 35: 3116285494907301262,
              36: 11959798385860453492L, 37: 45950804324621742364L, 38: 176733862787006701400L,
              39: 680425371729975800390L,
              40: 2622127042276492108820L, 41: 10113918591637898134020L, 42: 39044429911904443959240L,
              43: 150853479205085351660700L, 44: 583300119592996693088040L, 45: 2257117854077248073253720L,
              46: 8740328711533173390046320L, 47: 33868773757191046886429490L, 48: 131327898242169365477991900L,
              49: 509552245179617138054608572L, 50: 1978261657756160653623774456L, 51: 7684785670514316385230816156L,
              52: 29869166945772625950142417512L, 53: 116157871455782434250553845880L,
              54: 451959718027953471447609509424L,
              55: 1759414616608818870992479875972L, 56: 6852456927844873497549658464312L,
              57: 26700952856774851904245220912664L, 58: 104088460289122304033498318812080L,
              59: 405944995127576985730643443367112L, 60: 1583850964596120042686772779038896L,
              61: 6182127958584855650487080847216336L, 62: 24139737743045626825711458546273312L,
              63: 94295850558771979787935384946380125L, 64: 368479169875816659479009042713546950L,
              65: 1440418573150919668872489894243865350L, 66: 5632681584560312734993915705849145100L,
              67: 22033725021956517463358552614056949950L, 68: 86218923998960285726185640663701108500L,
              69: 337485502510215975556783793455058624700L, 70: 1321422108420282270489942177190229544600L,
              71: 5175569924646105559418940193995065716350L, 72: 20276890389709399862928998568254641025700L,
              73: 79463489365077377841208237632349268884500L, 74: 311496878311103321137536291518809134027240L,
              75: 1221395654430378811828760722007962130791020L, 76: 4790408930363303911328386208394864461024520L,
              77: 18793142726809884575211361279087545193250040L, 78: 73745243611532458459690151854647329239335600L,
              79: 289450081175264899454283846029490767264392230L, 80: 1136359577947336271931632877004667456667613940L,
              81: 4462290049988320482463241297506133183499654740L, 82: 17526585015616776834735140517915655636396234280L,
              83: 68854441132780194707888052034668647142985206100L,
              84: 270557451039395118028642463289168566420671280440L,
              85: 1063353702922273835973036658043476458723103404520L,
              86: 4180080073556524734514695828170907458428751314320L,
              87: 16435314834665426797069144960762886143367590394940L,
              88: 64633260585762914370496637486146181462681535261000L,
              89: 254224158304000796523953440778841647086547372026600L,
              90: 1000134600800354781929399250536541864362461089950800L,
              91: 3935312233584004685417853572763349509774031680023800L,
              92: 15487357822491889407128326963778343232013931127835600L,
              93: 60960876535340415751462563580829648891969728907438000L,
              94: 239993345518077005168915776623476723006280827488229600L,
              95: 944973797977428207852605870454939596837230758234904050L,
              96: 3721443204405954385563870541379246659709506697378694300L,
              97: 14657929356129575437016877846657032761712954950899755100L,
              98: 57743358069601357782187700608042856334020731624756611000L,
              99: 227508830794229349661819540395688853956041682601541047340L,
              100: 896519947090131496687170070074100632420837521538745909320L}
        res = self.calculate_tree_count(1, n, dp)
        # print dp
        return res


print Solution().numTrees(100)
